import { Vec3, Vec3Callback } from '../math/vec3';
import { Matrix4 } from '../math/mat4';
import { Quaternion } from '../math/quaternion';
import { IRectangle } from '../geom/rectangle/IRectangle';
import { IRenderer } from '../renderer/IRenderer';
export declare class NewCamera3D {
    type: string;
    renderer: IRenderer;
    position: Vec3Callback;
    rotation: Quaternion;
    matrix: Matrix4;
    viewMatrix: Matrix4;
    projectionMatrix: Matrix4;
    viewProjectionMatrix: Matrix4;
    forward: Vec3;
    up: Vec3;
    right: Vec3;
    start: Vec3;
    aspect: number;
    isOrbit: boolean;
    minDistance: number;
    maxDistance: number;
    minPolarAngle: number;
    maxPolarAngle: number;
    minAzimuthAngle: number;
    maxAzimuthAngle: number;
    dirtyRender: boolean;
    panRate: number;
    zoomRate: number;
    rotateRate: number;
    viewport: IRectangle;
    private _fov;
    private _near;
    private _far;
    private _yaw;
    private _pitch;
    private _roll;
    constructor(fov?: number, near?: number, far?: number);
    update(): this;
    panX(amount: number): this;
    panY(amount: number): this;
    panZ(amount: number): this;
    begin(x: number, y: number): void;
    pan(x: number, y: number): void;
    rotate(x: number, y: number): void;
    zoom(delta: number): void;
    setAspectRatio(value?: number): this;
    updateProjectionMatrix(): this;
    get fov(): number;
    set fov(value: number);
    get near(): number;
    set near(value: number);
    get far(): number;
    set far(value: number);
    get yaw(): number;
    set yaw(value: number);
    get pitch(): number;
    set pitch(value: number);
    get roll(): number;
    set roll(value: number);
}
//# sourceMappingURL=NewCamera3D.d.ts.map